import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;

public class ChatServer {

    public ChatServer() {}

    public void start() {
        System.out.println("Chat Server started");
        try {
            ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.socket().bind(new InetSocketAddress(5000));

            boolean running = true;
            while (running) {
                System.out.println("Waiting for request ...");
                SocketChannel socketChannel
                        = serverSocketChannel.accept();

                System.out.println("Connected to Client");
                String message;
                Scanner scanner = new Scanner(System.in);

                // Create new rw file
                RandomAccessFile my_File = new RandomAccessFile("C:\\Users\\James\\OneDrive - GMIT\\Year 5\\IDEAProjects\\assignment1_file.txt", "rw");
                // Open channel
                FileChannel File_Channel = my_File.getChannel();
                // write to file
                String content = new String(Files.readAllBytes(Paths.get("C:\\Users\\James\\OneDrive - GMIT\\Year 5\\IDEAProjects\\assignment1_file.txt")));
                // creating and initializing ByteBuffer for reading/writing data
                ByteBuffer buff = ByteBuffer.allocate(128);
                // Clear buffer
                buff.clear();
                buff.put(content.getBytes());
                File_Channel.write(buff);

                while (File_Channel.read(buff) != -1) {
                    buff.flip();
                    while(buff.hasRemaining()) {
                        System.out.println(content += (char) buff.get());
//                        System.out.println("HERE 3");
                    }
                    System.out.print("> ");
//                    System.out.println();
                    message = scanner.nextLine();

                    if (message.equalsIgnoreCase("quit")) {
//                        HelperMethods.sendFixedLengthMessage(
//                                socketChannel, "Server terminating");
                        HelperMethods.sendMessage(
                                socketChannel, "Server terminating");
                        running = false;
                        break;
                    } else {
//                        HelperMethods.sendFixedLengthMessage(
//                                socketChannel, message);
                        HelperMethods.sendMessage(socketChannel, message);
                        // Receive message
                        System.out.println("Waiting for message from client ...");
//                        System.out.println("Message: "
//                                + HelperMethods.receiveFixedLengthMessage(socketChannel));
                        System.out.println("Message: " + HelperMethods.receiveMessage(socketChannel));
                    }
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new ChatServer().start();
    }
}
